package amigos;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/// @Author: Christian Berdejo Sánchez
/// @Version 1.0
public class Club {
    protected Set<Persona> socios;
    private static Random alea = new Random();

    public Club() {
        socios = new TreeSet<>();
    }

    /// Lee el fichero y añade los socios al `Club`
    /// @param  fEntrada fichero de entrada
    /// @param  delim delimitador
    /// @throws  IOException
    public void  lee(String fEntrada, String delim) throws IOException {
        try (Scanner sc = new Scanner(Path.of(fEntrada))){
            while(sc.hasNextLine()){
                leeSocios(sc.nextLine(), delim);
            }

        }
    }

    /// Lee una linea  y añade socios según el delimitador pasado
    /// @param linea linea del fichero
    /// @param delim delimitador
    private void leeSocios(String linea, String delim) {

        try (Scanner scLinea = new Scanner(linea)){
            scLinea.useDelimiter( "["+delim+"]+");

            while (scLinea.hasNext()){
                creaSocioDesdeString(scLinea.next());
            }
        } catch (NoSuchElementException e) {
            //No se especifica nada de excepciones, por lo que la linea no es válida, se ignora y ya.
        }

    }

    /// Crea un socio a partir de una cadena
    /// @param  nombre nombre del socio
    protected void creaSocioDesdeString(String nombre){
        socios.add(new Persona(nombre));

    }

    ///De forma aleatoria, se asigna a cada persona un amigo invisible.
    protected void hacerAmigos(){
        if (socios.size() < 2)throw new AmigoException("No hay suficientes socios para hacer amigos");

        List<Integer> posAmigos = new ArrayList<>(IntStream.range(0, socios.size()).boxed().toList());

        do{
        Collections.shuffle(posAmigos);
        } while(hayCoincidencias(posAmigos));

        List<Persona> listaSocios = socios.stream().toList();

        for (int i = 0; i < socios.size(); i++){
            listaSocios.get(i).setAmigo(listaSocios.get(posAmigos.get(i)));
        }


    }



    /// Verifica si alguna posición en la lista de posiciones de amigos coincide con la posición correspondiente en la lista de socios.
    ///
    /// Si al menos una coincidencia en las posiciones el método devuelve `true`; de lo contrario, devuelve `false`.
    ///
    /// @param posAmigos Lista de posiciones de amigos, donde cada índice representa la persona a la que regalará el socio correspondiente.
    /// @return true si hay alguna coincidencia, false en caso contrario
    ///
    private boolean hayCoincidencias(List<Integer> posAmigos) {
        for (int i = 0; i < socios.size(); i++){
            if (posAmigos.get(i) == i){
                return true;
            }
        }
        return false;
    }
    /// Presenta los socios en el fichero de salida
    /// @param  fSalida fichero de salida
    public void presentaAmigos(String fSalida) throws FileNotFoundException{
        try (PrintWriter pw = new PrintWriter(fSalida)) {
            presentaAmigos(pw);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.err.println("ERROR: falta el nombre del fichero");
        } catch (IOException e) {
            System.err.println("ERROR: no se puede escribir el fichero");
        }
    }
    /// Imprime las lineas de cada socio
    /// @param  pw fichero de salida
    public void presentaAmigos(PrintWriter pw){

        for (Persona p : socios){
            pw.println(p);
        }
    }

    @Override
    public String toString(){
        StringBuilder sb = new StringBuilder();
        for (Persona p : socios){
            sb.append(p.toString()).append("\n");
        }
        return sb.toString();
    }
}
